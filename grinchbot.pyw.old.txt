#!/usr/bin/python

# simple.py

import wx
import thread
#import praw
import re
import time
import datetime
import os
import webbrowser
import urllib
import json
import sys

from sys import platform as _platform
if _platform == "linux" or _platform == "linux2":
	import pynotify
	


path = os.path.dirname(os.path.realpath(__file__))
#r = praw.Reddit(user_agent="a")
sleep_time = 5

defRegList = ["\\bkeys?\\b", "\\bredeems?\\b", "\\bgiving\\b", "\\bgiveaways?\\b", "\\bleftovers?\\b", "\\bcodes?\\b"]
pcmrRegList = ["\\bkeys?\\b", "\\bredeems?\\b", "\\bgiving\\b", "\\bgiveaways?\\b", "\\bleftovers?\\b", "\\bcodes?\\b", "\\b[a-zA-Z0-9]{5}\-[a-zA-Z0-9]{5}\-[a-zA-Z0-9]{5}\\b", "\\b[a-zA-Z0-9]{5}\-[a-zA-Z0-9]{5}\-[a-zA-Z0-9]{5}\-[a-zA-Z0-9]{5}\-[a-zA-Z0-9]{5}\\b"]
gogRegList = ["\[offer\]"]
rasRegList = ["\[giveaway\]"]

class TBIcon(wx.TaskBarIcon):
	TBMENU_RESTORE = wx.NewId()
	TBMENU_CLOSE   = wx.NewId()
	TBMENU_CHANGE  = wx.NewId()
	TBMENU_REMOVE  = wx.NewId()
 
	#----------------------------------------------------------------------
	def __init__(self, frame):
		wx.TaskBarIcon.__init__(self)
		self.frame = frame
 
		# Set the image
		self.tbIcon = wx.Icon(path+'/icon.png', wx.BITMAP_TYPE_PNG)
 
		self.SetIcon(self.tbIcon, "Grinchbot")
		
		if _platform == "linux" or _platform == "linux2":
			pynotify.init("GrinchBot")
 
		# bind some events
		self.Bind(wx.EVT_MENU, self.OnTaskBarClose, id=self.TBMENU_CLOSE)
		self.Bind(wx.EVT_MENU, self.OnTaskBarOpen, id=self.TBMENU_RESTORE)
		self.Bind(wx.EVT_TASKBAR_RIGHT_DOWN, self.OnTaskBarRightClick)
		self.Bind(wx.EVT_TASKBAR_LEFT_DOWN, self.OnTaskBarLeftClick)
		
	#----------------------------------------------------------------------
	def CreatePopupMenu(self, evt=None):
		menu = wx.Menu()
		menu.Append(self.TBMENU_RESTORE, "Open")
		#menu.Append(self.TBMENU_CHANGE, "Show all the Items")
		menu.AppendSeparator()
		menu.Append(self.TBMENU_CLOSE,   "Exit")
		return menu
 
	#----------------------------------------------------------------------
	def OnTaskBarActivate(self, evt):
		pass
 
	#----------------------------------------------------------------------
	def OnTaskBarClose(self, evt):
		self.frame.Destroy()
		self.RemoveIcon()
		self.Destroy()
		
	#----------------------------------------------------------------------
	def OnTaskBarOpen(self, evt):
		self.frame.Show()
		
	def OnTaskBarLeftClick(self, evt):
		if (self.frame.IsShown()):
			self.frame.Hide()
		else:
			self.frame.Show()
 
	#----------------------------------------------------------------------
	def OnTaskBarRightClick(self, evt):
		menu = self.CreatePopupMenu()
		self.PopupMenu(menu)
		menu.Destroy()
		
	def send_notification(self, title, message):
		if _platform == "linux" or _platform == "linux2": #Master Race
			pynotify.Notification(title, message, path+'/icon.png').show()
		elif _platform == "win32": #Peasant
			self.ShowBalloon(title, message)
		#elif _platform == "darwin": #Heathen(unsupported)
		
		try:
			os.system('play '+path+'/notify.wav')
		except:
			print("Couldn't play sound!")
			

class MainWindow(wx.Frame):
	running = False
	
	def __init__(self):
		wx.Frame.__init__(self, None, size=(600, 500), title="GrinchBot")
		
		self.scanned_posts = []
		self.finds = []
		self.current = None
		
		self.SetIcon(wx.Icon(path+'/icon.png', wx.BITMAP_TYPE_PNG))
		
		#self.log_message("Starting...")
		#r.login('drakeruibot', '125634')

		self.defCompList = []
		for reg in defRegList:
			self.defCompList.append(re.compile(reg, re.IGNORECASE))

		self.pcmrCompList = []
		for reg in pcmrRegList:
			self.pcmrCompList.append(re.compile(reg, re.IGNORECASE))	
		
		self.gogCompList = []
		for reg in gogRegList:
			self.gogCompList.append(re.compile(reg, re.IGNORECASE))
		
		self.rasCompList = []
		for reg in rasRegList:
			self.rasCompList.append(re.compile(reg, re.IGNORECASE))
		
		self.InitUI()
		
		#self.lastrun = 0
		#thread.start_new_thread( self.ThreadLoop, () )threads = []
		
		sub_options = "STUFF:", (('FreeGameFindings', False, False, 60*24), ('FreeGamesOnSteam', False, False, 60*24), ('Freegamestuff', False, False, 60*24), ('giveaway', False, False, 10), ('steamgiveaway', False, False, 5), ('RandomActsOfGaming', False, False, 5), ('pcmasterrace', self.pcmrCompList, True, 10), ('GiftofGames', self.gogCompList, False, 60*24), ('randomactsofsteam', self.rasCompList, False, 30), ('SecretSteamSanta', self.defCompList, False, 30), ('GiftOfGaben', self.defCompList, False, 60))
		

		thread.start_new_thread(self.ThreadLoop, sub_options)

		self.Show(True)
		
		self.OnStart(None)
		
	def InitUI(self):
		pnl = wx.Panel(self)
		self.stateButton = wx.Button(pnl, label='', pos=(2, 2), size=(60, 25))
		
		firstButton = wx.Button(pnl, label='<<', pos=(65, 2), size=(30, 25))
		prevButton = wx.Button(pnl, label='<', pos=(95, 2), size=(20, 25))
		nextButton = wx.Button(pnl, label='>', pos=(150, 2), size=(20, 25))
		lastButton = wx.Button(pnl, label='>>', pos=(170, 2), size=(30, 25))
		seenButton = wx.Button(pnl, label='Remove', pos=(205, 2), size=(60, 25))
		openButton = wx.Button(pnl, label='Open', pos=(265, 2), size=(45, 25))
		
		self.offsetT = wx.StaticText(pnl, label='0/0', style=wx.ALIGN_CENTER, pos=(117, 6), size=(45, 25))
		self.posCtrl = wx.TextCtrl(pnl, -1, "", pos=(2, 27), size=(596, 447), style = wx.TE_MULTILINE|wx.TE_READONLY|wx.TE_AUTO_URL)
		self.posCtrl.Disable()
		
		firstButton.Bind(wx.EVT_BUTTON, self.FirstFind)
		prevButton.Bind(wx.EVT_BUTTON, self.PrevFind)
		nextButton.Bind(wx.EVT_BUTTON, self.NextFind)
		lastButton.Bind(wx.EVT_BUTTON, self.LastFind)
		
		seenButton.Bind(wx.EVT_BUTTON, self.DelPost)
		openButton.Bind(wx.EVT_BUTTON, self.OpenPost)
		
		self.sb = self.CreateStatusBar()
		
		self.tbIcon = TBIcon(self)
		self.Bind(wx.EVT_CLOSE, self.onClose)
 
	def onClose(self, evt):
		self.Hide()
		
	def FirstFind(self, e):
		index = 0	
		
		self.ShowPost(index)
		
	def NextFind(self, e):
		index = 0
		
		if (self.current in self.finds):
			index = self.finds.index(self.current)+1
		
		self.ShowPost(index)
		
	def PrevFind(self, e):
		index = 0
		
		if (self.current in self.finds):
			index = self.finds.index(self.current)-1
		
		self.ShowPost(index)
		
	def LastFind(self, e):
		index = len(self.finds)-1
		
		self.ShowPost(index)
	
	def DelPost(self, e):
		if (len(self.finds) > 0):
			index = self.finds.index(self.current)
			self.finds.remove(self.current)
			
			self.ShowPost(index)
	
	def ShowPost(self, index):
		if (len(self.finds) > 0):
			if (not index in range(len(self.finds))):
				if (index > len(self.finds)-1):
					index = len(self.finds)-1
				else:
					index = 0
			
			self.offsetT.SetLabel(str(index+1)+"/"+str(len(self.finds)))
			self.posCtrl.Enable()
			
			
			self.current = self.finds[index]
			self.posCtrl.SetValue("/r/"+str(self.current['data']['subreddit'])+ datetime.datetime.fromtimestamp(self.current['data']['created_utc']).strftime(' %H:%M:%S')+datetime.datetime.fromtimestamp(time.time()).strftime(' %H:%M:%S')+"\n"+self.current['data']['permalink']+"\n"+self.current['data']['url']+"\n"+self.current['data']['title'])
			if (self.current['data']['is_self']):
				self.posCtrl.AppendText("\n\n"+self.current['data']['selftext'])
		else:
			self.offsetT.SetLabel("0/0")
			self.posCtrl.Disable()
			self.posCtrl.SetValue("");
			self.current = None
				
	def OpenPost(self, e):
		if (self.current):
			webbrowser.open(self.current['data']['url'])
	
	def OnStart(self, e):
		self.stateButton.SetLabel("Stop")
		self.stateButton.Bind(wx.EVT_BUTTON, self.OnStop)
		self.running = True
	
	def OnStop(self, e):
		self.stateButton.SetLabel("Start")
		self.stateButton.Bind(wx.EVT_BUTTON, self.OnStart)
		self.running = False
		
	def ThreadLoop(self, ignore, sub_options):
		while (True):
			if (self.running):
				self.log_message("Executing initial scan...")
				for opts in sub_options:
					self.scan_subreddit(opts[0], opts[1], opts[2], opts[3])
					time.sleep(sleep_time)
				
				self.log_message("Initial scan completed, starting regular scan...")
				while (self.running):
					self.scan_multireddit(20, sub_options)
					time.sleep(sleep_time)

			time.sleep(sleep_time)
				
	def log_message(self, message):
		#wx.CallAfter(self.sb.SetStatusText, "["+datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')+"] "+message)
		print("["+datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')+"]"+message)
		
	def update_counter(self):
		wx.CallAfter(self.sb.SetStatusText, "Scanned posts: "+str(len(self.scanned_posts)))
	
	
	def scan_subreddit(self, subreddit, filters, selfcheck, max_age):
		text =  "Scanning /r/"+subreddit+" "
		if not filters:	
			text = text + "!"
		
		text = text + "filter "
		
		if filters:
			if not selfcheck:
				text = text + "!"
					
			text = text + "selfpost"
			
		self.log_message(text)
		
		found = 0
		
		error = 0;
		
		while(error < 5):
			try:
				f = urllib.urlopen("http://www.reddit.com/r/"+subreddit+"/new.json")
				submissions = json.load(f)

				#submissions = r.get_subreddit(subreddit).get_new(limit=30)	
				#for submission in submissions:

				for submission in submissions['data']['children']:
					
					save = False

					if submission['data']['id'] not in self.scanned_posts and ((time.time()+time.timezone)-(submission['data']['created_utc'])) < max_age*60:
						match = False
						
						if filters:
							for reg in filters:
								stuff_to_match = [submission['data']['title']]
								if submission['data']['link_flair_text']:
									stuff_to_match.append(submission['data']['link_flair_text'])
								if submission['data']['is_self'] and selfcheck:
									stuff_to_match.append(submission['data']['selftext'])

								for string in stuff_to_match:
									if (reg.search(string)):
										save = True
										break
						
								if save:
									break
						else:
							save = True
						
						if save:
							self.log_post(submission, save)
							found = found + 1
						
						self.scanned_posts.append(submission['data']['id'])
						
				if found:
					self.tbIcon.send_notification('GrinchBot', "Possible Hit!")
					
				break
			except:
				error = error + 1
				time.sleep(1)
		
		if (error >= 5):
			self.log_message("Something bad happened, is your internet connection working?")
			
		self.update_counter()
		
		return found

	def scan_multireddit(self, limit, sub_options):
		found = 0
		
		error = 0;
		
		multi = ""
		first = True
		for opts in sub_options:
			if first:
				multi = opts[0]
				first = False
			else:
				multi = multi + "+" + opts[0]

		
		self.log_message("Scanning /r/"+multi+"/new/")

		while(error < 5):
			try:
				f = urllib.urlopen("https://www.reddit.com/r/"+multi+"/new/.json?limit="+str(limit))
				submissions = json.load(f)

				for submission in submissions['data']['children']:
					save = False

					if submission['data']['id'] not in self.scanned_posts:
						for opts in sub_options:
							if opts[0].find(submission['data']['subreddit']) != -1 and ((time.time()+time.timezone)-(submission['data']['created_utc'])) < opts[3]*60:
								if opts[1]:
									for reg in opts[1]:
										stuff_to_match = [submission['data']['title']]
										if submission['data']['link_flair_text']:
											stuff_to_match.append(submission['data']['link_flair_text'])
										if submission['data']['is_self'] and opts[2]:
											stuff_to_match.append(submission['data']['selftext'])

										for string in stuff_to_match:
											if (reg.search(string)):
												save = True
												break
								
										if save:
											break
								else:
									save = True
							if save:
								break
							
						
						if save:
							self.log_post(submission, save)
							found = found + 1
						
						self.scanned_posts.append(submission['data']['id'])
						
				if found:
					self.tbIcon.send_notification('GrinchBot', "Possible Hit!")
					
				break
			except Exception, e:
				error = error + 1

				if error < 5:
					self.log_message("ERROR "+str(error)+":"+str(e)+", retrying.")
				else:
					self.log_message("ERROR "+str(error)+":"+str(e)+", skipping.")

				time.sleep(1)
		
		if (error >= 5):
			self.log_message("Something bad happened, is your internet connection working?")
			
		self.update_counter()
		
		return found

	def log_post(self, post, save):
		self.finds.append(post)
		
		wx.CallAfter(self.LastFind, (self, None))
		
		#f = open('/home/drake/Desktop/posts.log','a')
		#f.write(" - "+title+"("+url+")\n")
		
		#if not save == True:
			#print("["+save+"]-"+post.title+"("+post.url+")")
		#else:
			#print(post.title+"("+post.url+")")
			
		#if post.is_self:
			#f.write("\t"+content.replace("\n", "\n\t")+"\n")
			#print(post.selftext)
			
		#f.close()

if __name__ == "__main__":
	app = wx.App(False)
	frame = MainWindow().Show()
	app.MainLoop()
